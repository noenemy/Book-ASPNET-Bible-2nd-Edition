'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.3328.4
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsBoard
    Inherits DataSet
    
    Private tableboardcontent As boardcontentDataTable
    
    Private tableboardmaster As boardmasterDataTable
    
    Private tableboardlist As boardlistDataTable
    
    Private tableGetArticle As GetArticleDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("boardcontent")) Is Nothing) Then
                Me.Tables.Add(New boardcontentDataTable(ds.Tables("boardcontent")))
            End If
            If (Not (ds.Tables("boardmaster")) Is Nothing) Then
                Me.Tables.Add(New boardmasterDataTable(ds.Tables("boardmaster")))
            End If
            If (Not (ds.Tables("boardlist")) Is Nothing) Then
                Me.Tables.Add(New boardlistDataTable(ds.Tables("boardlist")))
            End If
            If (Not (ds.Tables("GetArticle")) Is Nothing) Then
                Me.Tables.Add(New GetArticleDataTable(ds.Tables("GetArticle")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property boardcontent As boardcontentDataTable
        Get
            Return Me.tableboardcontent
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property boardmaster As boardmasterDataTable
        Get
            Return Me.tableboardmaster
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property boardlist As boardlistDataTable
        Get
            Return Me.tableboardlist
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GetArticle As GetArticleDataTable
        Get
            Return Me.tableGetArticle
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsBoard = CType(MyBase.Clone,dsBoard)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("boardcontent")) Is Nothing) Then
            Me.Tables.Add(New boardcontentDataTable(ds.Tables("boardcontent")))
        End If
        If (Not (ds.Tables("boardmaster")) Is Nothing) Then
            Me.Tables.Add(New boardmasterDataTable(ds.Tables("boardmaster")))
        End If
        If (Not (ds.Tables("boardlist")) Is Nothing) Then
            Me.Tables.Add(New boardlistDataTable(ds.Tables("boardlist")))
        End If
        If (Not (ds.Tables("GetArticle")) Is Nothing) Then
            Me.Tables.Add(New GetArticleDataTable(ds.Tables("GetArticle")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableboardcontent = CType(Me.Tables("boardcontent"),boardcontentDataTable)
        If (Not (Me.tableboardcontent) Is Nothing) Then
            Me.tableboardcontent.InitVars
        End If
        Me.tableboardmaster = CType(Me.Tables("boardmaster"),boardmasterDataTable)
        If (Not (Me.tableboardmaster) Is Nothing) Then
            Me.tableboardmaster.InitVars
        End If
        Me.tableboardlist = CType(Me.Tables("boardlist"),boardlistDataTable)
        If (Not (Me.tableboardlist) Is Nothing) Then
            Me.tableboardlist.InitVars
        End If
        Me.tableGetArticle = CType(Me.Tables("GetArticle"),GetArticleDataTable)
        If (Not (Me.tableGetArticle) Is Nothing) Then
            Me.tableGetArticle.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsBoard"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsBoard.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableboardcontent = New boardcontentDataTable
        Me.Tables.Add(Me.tableboardcontent)
        Me.tableboardmaster = New boardmasterDataTable
        Me.Tables.Add(Me.tableboardmaster)
        Me.tableboardlist = New boardlistDataTable
        Me.Tables.Add(Me.tableboardlist)
        Me.tableGetArticle = New GetArticleDataTable
        Me.Tables.Add(Me.tableGetArticle)
    End Sub
    
    Private Function ShouldSerializeboardcontent() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeboardmaster() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeboardlist() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGetArticle() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub boardcontentRowChangeEventHandler(ByVal sender As Object, ByVal e As boardcontentRowChangeEvent)
    
    Public Delegate Sub boardmasterRowChangeEventHandler(ByVal sender As Object, ByVal e As boardmasterRowChangeEvent)
    
    Public Delegate Sub boardlistRowChangeEventHandler(ByVal sender As Object, ByVal e As boardlistRowChangeEvent)
    
    Public Delegate Sub GetArticleRowChangeEventHandler(ByVal sender As Object, ByVal e As GetArticleRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class boardcontentDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnb_id As DataColumn
        
        Private columnc_id As DataColumn
        
        Private columnc_step As DataColumn
        
        Private columncontent As DataColumn
        
        Friend Sub New()
            MyBase.New("boardcontent")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property b_idColumn As DataColumn
            Get
                Return Me.columnb_id
            End Get
        End Property
        
        Friend ReadOnly Property c_idColumn As DataColumn
            Get
                Return Me.columnc_id
            End Get
        End Property
        
        Friend ReadOnly Property c_stepColumn As DataColumn
            Get
                Return Me.columnc_step
            End Get
        End Property
        
        Friend ReadOnly Property contentColumn As DataColumn
            Get
                Return Me.columncontent
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As boardcontentRow
            Get
                Return CType(Me.Rows(index),boardcontentRow)
            End Get
        End Property
        
        Public Event boardcontentRowChanged As boardcontentRowChangeEventHandler
        
        Public Event boardcontentRowChanging As boardcontentRowChangeEventHandler
        
        Public Event boardcontentRowDeleted As boardcontentRowChangeEventHandler
        
        Public Event boardcontentRowDeleting As boardcontentRowChangeEventHandler
        
        Public Overloads Sub AddboardcontentRow(ByVal row As boardcontentRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddboardcontentRow(ByVal b_id As String, ByVal c_id As Integer, ByVal c_step As Integer, ByVal content As String) As boardcontentRow
            Dim rowboardcontentRow As boardcontentRow = CType(Me.NewRow,boardcontentRow)
            rowboardcontentRow.ItemArray = New Object() {b_id, c_id, c_step, content}
            Me.Rows.Add(rowboardcontentRow)
            Return rowboardcontentRow
        End Function
        
        Public Function FindByb_idc_idc_step(ByVal b_id As String, ByVal c_id As Integer, ByVal c_step As Integer) As boardcontentRow
            Return CType(Me.Rows.Find(New Object() {b_id, c_id, c_step}),boardcontentRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As boardcontentDataTable = CType(MyBase.Clone,boardcontentDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Friend Sub InitVars()
            Me.columnb_id = Me.Columns("b_id")
            Me.columnc_id = Me.Columns("c_id")
            Me.columnc_step = Me.Columns("c_step")
            Me.columncontent = Me.Columns("content")
        End Sub
        
        Private Sub InitClass()
            Me.columnb_id = New DataColumn("b_id", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnb_id)
            Me.columnc_id = New DataColumn("c_id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnc_id)
            Me.columnc_step = New DataColumn("c_step", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnc_step)
            Me.columncontent = New DataColumn("content", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncontent)
            Me.Constraints.Add(New UniqueConstraint("dsBoardKey1", New DataColumn() {Me.columnb_id, Me.columnc_id, Me.columnc_step}, true))
            Me.columnb_id.AllowDBNull = false
            Me.columnc_id.AllowDBNull = false
            Me.columnc_step.AllowDBNull = false
        End Sub
        
        Public Function NewboardcontentRow() As boardcontentRow
            Return CType(Me.NewRow,boardcontentRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New boardcontentRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(boardcontentRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.boardcontentRowChangedEvent) Is Nothing) Then
                RaiseEvent boardcontentRowChanged(Me, New boardcontentRowChangeEvent(CType(e.Row,boardcontentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.boardcontentRowChangingEvent) Is Nothing) Then
                RaiseEvent boardcontentRowChanging(Me, New boardcontentRowChangeEvent(CType(e.Row,boardcontentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.boardcontentRowDeletedEvent) Is Nothing) Then
                RaiseEvent boardcontentRowDeleted(Me, New boardcontentRowChangeEvent(CType(e.Row,boardcontentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.boardcontentRowDeletingEvent) Is Nothing) Then
                RaiseEvent boardcontentRowDeleting(Me, New boardcontentRowChangeEvent(CType(e.Row,boardcontentRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveboardcontentRow(ByVal row As boardcontentRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class boardcontentRow
        Inherits DataRow
        
        Private tableboardcontent As boardcontentDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableboardcontent = CType(Me.Table,boardcontentDataTable)
        End Sub
        
        Public Property b_id As String
            Get
                Return CType(Me(Me.tableboardcontent.b_idColumn),String)
            End Get
            Set
                Me(Me.tableboardcontent.b_idColumn) = value
            End Set
        End Property
        
        Public Property c_id As Integer
            Get
                Return CType(Me(Me.tableboardcontent.c_idColumn),Integer)
            End Get
            Set
                Me(Me.tableboardcontent.c_idColumn) = value
            End Set
        End Property
        
        Public Property c_step As Integer
            Get
                Return CType(Me(Me.tableboardcontent.c_stepColumn),Integer)
            End Get
            Set
                Me(Me.tableboardcontent.c_stepColumn) = value
            End Set
        End Property
        
        Public Property content As String
            Get
                Try 
                    Return CType(Me(Me.tableboardcontent.contentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableboardcontent.contentColumn) = value
            End Set
        End Property
        
        Public Function IscontentNull() As Boolean
            Return Me.IsNull(Me.tableboardcontent.contentColumn)
        End Function
        
        Public Sub SetcontentNull()
            Me(Me.tableboardcontent.contentColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class boardcontentRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As boardcontentRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As boardcontentRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As boardcontentRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class boardmasterDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnb_id As DataColumn
        
        Private columntitle As DataColumn
        
        Private columnpagesize As DataColumn
        
        Private columnadminpw As DataColumn
        
        Private column_readonly As DataColumn
        
        Friend Sub New()
            MyBase.New("boardmaster")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property b_idColumn As DataColumn
            Get
                Return Me.columnb_id
            End Get
        End Property
        
        Friend ReadOnly Property titleColumn As DataColumn
            Get
                Return Me.columntitle
            End Get
        End Property
        
        Friend ReadOnly Property pagesizeColumn As DataColumn
            Get
                Return Me.columnpagesize
            End Get
        End Property
        
        Friend ReadOnly Property adminpwColumn As DataColumn
            Get
                Return Me.columnadminpw
            End Get
        End Property
        
        Friend ReadOnly Property _readonlyColumn As DataColumn
            Get
                Return Me.column_readonly
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As boardmasterRow
            Get
                Return CType(Me.Rows(index),boardmasterRow)
            End Get
        End Property
        
        Public Event boardmasterRowChanged As boardmasterRowChangeEventHandler
        
        Public Event boardmasterRowChanging As boardmasterRowChangeEventHandler
        
        Public Event boardmasterRowDeleted As boardmasterRowChangeEventHandler
        
        Public Event boardmasterRowDeleting As boardmasterRowChangeEventHandler
        
        Public Overloads Sub AddboardmasterRow(ByVal row As boardmasterRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddboardmasterRow(ByVal b_id As String, ByVal title As String, ByVal pagesize As Integer, ByVal adminpw As String, ByVal _readonly As String) As boardmasterRow
            Dim rowboardmasterRow As boardmasterRow = CType(Me.NewRow,boardmasterRow)
            rowboardmasterRow.ItemArray = New Object() {b_id, title, pagesize, adminpw, _readonly}
            Me.Rows.Add(rowboardmasterRow)
            Return rowboardmasterRow
        End Function
        
        Public Function FindByb_id(ByVal b_id As String) As boardmasterRow
            Return CType(Me.Rows.Find(New Object() {b_id}),boardmasterRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As boardmasterDataTable = CType(MyBase.Clone,boardmasterDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Friend Sub InitVars()
            Me.columnb_id = Me.Columns("b_id")
            Me.columntitle = Me.Columns("title")
            Me.columnpagesize = Me.Columns("pagesize")
            Me.columnadminpw = Me.Columns("adminpw")
            Me.column_readonly = Me.Columns("readonly")
        End Sub
        
        Private Sub InitClass()
            Me.columnb_id = New DataColumn("b_id", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnb_id)
            Me.columntitle = New DataColumn("title", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntitle)
            Me.columnpagesize = New DataColumn("pagesize", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpagesize)
            Me.columnadminpw = New DataColumn("adminpw", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadminpw)
            Me.column_readonly = New DataColumn("readonly", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_readonly)
            Me.Constraints.Add(New UniqueConstraint("dsBoardKey3", New DataColumn() {Me.columnb_id}, true))
            Me.columnb_id.AllowDBNull = false
            Me.columnb_id.Unique = true
            Me.columntitle.AllowDBNull = false
            Me.columnpagesize.AllowDBNull = false
            Me.columnadminpw.AllowDBNull = false
            Me.column_readonly.AllowDBNull = false
        End Sub
        
        Public Function NewboardmasterRow() As boardmasterRow
            Return CType(Me.NewRow,boardmasterRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New boardmasterRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(boardmasterRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.boardmasterRowChangedEvent) Is Nothing) Then
                RaiseEvent boardmasterRowChanged(Me, New boardmasterRowChangeEvent(CType(e.Row,boardmasterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.boardmasterRowChangingEvent) Is Nothing) Then
                RaiseEvent boardmasterRowChanging(Me, New boardmasterRowChangeEvent(CType(e.Row,boardmasterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.boardmasterRowDeletedEvent) Is Nothing) Then
                RaiseEvent boardmasterRowDeleted(Me, New boardmasterRowChangeEvent(CType(e.Row,boardmasterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.boardmasterRowDeletingEvent) Is Nothing) Then
                RaiseEvent boardmasterRowDeleting(Me, New boardmasterRowChangeEvent(CType(e.Row,boardmasterRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveboardmasterRow(ByVal row As boardmasterRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class boardmasterRow
        Inherits DataRow
        
        Private tableboardmaster As boardmasterDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableboardmaster = CType(Me.Table,boardmasterDataTable)
        End Sub
        
        Public Property b_id As String
            Get
                Return CType(Me(Me.tableboardmaster.b_idColumn),String)
            End Get
            Set
                Me(Me.tableboardmaster.b_idColumn) = value
            End Set
        End Property
        
        Public Property title As String
            Get
                Return CType(Me(Me.tableboardmaster.titleColumn),String)
            End Get
            Set
                Me(Me.tableboardmaster.titleColumn) = value
            End Set
        End Property
        
        Public Property pagesize As Integer
            Get
                Return CType(Me(Me.tableboardmaster.pagesizeColumn),Integer)
            End Get
            Set
                Me(Me.tableboardmaster.pagesizeColumn) = value
            End Set
        End Property
        
        Public Property adminpw As String
            Get
                Return CType(Me(Me.tableboardmaster.adminpwColumn),String)
            End Get
            Set
                Me(Me.tableboardmaster.adminpwColumn) = value
            End Set
        End Property
        
        Public Property _readonly As String
            Get
                Return CType(Me(Me.tableboardmaster._readonlyColumn),String)
            End Get
            Set
                Me(Me.tableboardmaster._readonlyColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class boardmasterRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As boardmasterRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As boardmasterRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As boardmasterRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class boardlistDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnb_id As DataColumn
        
        Private columnc_id As DataColumn
        
        Private columnc_step As DataColumn
        
        Private columnc_depth As DataColumn
        
        Private columnregdate As DataColumn
        
        Private columnsubject As DataColumn
        
        Private columnwriter As DataColumn
        
        Private columnemail As DataColumn
        
        Private columnreadcount As DataColumn
        
        Private columndowncount As DataColumn
        
        Private columnfilename As DataColumn
        
        Private columnfilesize As DataColumn
        
        Private columnpassword As DataColumn
        
        Friend Sub New()
            MyBase.New("boardlist")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property b_idColumn As DataColumn
            Get
                Return Me.columnb_id
            End Get
        End Property
        
        Friend ReadOnly Property c_idColumn As DataColumn
            Get
                Return Me.columnc_id
            End Get
        End Property
        
        Friend ReadOnly Property c_stepColumn As DataColumn
            Get
                Return Me.columnc_step
            End Get
        End Property
        
        Friend ReadOnly Property c_depthColumn As DataColumn
            Get
                Return Me.columnc_depth
            End Get
        End Property
        
        Friend ReadOnly Property regdateColumn As DataColumn
            Get
                Return Me.columnregdate
            End Get
        End Property
        
        Friend ReadOnly Property subjectColumn As DataColumn
            Get
                Return Me.columnsubject
            End Get
        End Property
        
        Friend ReadOnly Property writerColumn As DataColumn
            Get
                Return Me.columnwriter
            End Get
        End Property
        
        Friend ReadOnly Property emailColumn As DataColumn
            Get
                Return Me.columnemail
            End Get
        End Property
        
        Friend ReadOnly Property readcountColumn As DataColumn
            Get
                Return Me.columnreadcount
            End Get
        End Property
        
        Friend ReadOnly Property downcountColumn As DataColumn
            Get
                Return Me.columndowncount
            End Get
        End Property
        
        Friend ReadOnly Property filenameColumn As DataColumn
            Get
                Return Me.columnfilename
            End Get
        End Property
        
        Friend ReadOnly Property filesizeColumn As DataColumn
            Get
                Return Me.columnfilesize
            End Get
        End Property
        
        Friend ReadOnly Property passwordColumn As DataColumn
            Get
                Return Me.columnpassword
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As boardlistRow
            Get
                Return CType(Me.Rows(index),boardlistRow)
            End Get
        End Property
        
        Public Event boardlistRowChanged As boardlistRowChangeEventHandler
        
        Public Event boardlistRowChanging As boardlistRowChangeEventHandler
        
        Public Event boardlistRowDeleted As boardlistRowChangeEventHandler
        
        Public Event boardlistRowDeleting As boardlistRowChangeEventHandler
        
        Public Overloads Sub AddboardlistRow(ByVal row As boardlistRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddboardlistRow(ByVal b_id As String, ByVal c_id As Integer, ByVal c_step As Integer, ByVal c_depth As Integer, ByVal regdate As Date, ByVal subject As String, ByVal writer As String, ByVal email As String, ByVal readcount As Integer, ByVal downcount As Integer, ByVal filename As String, ByVal filesize As String, ByVal password As String) As boardlistRow
            Dim rowboardlistRow As boardlistRow = CType(Me.NewRow,boardlistRow)
            rowboardlistRow.ItemArray = New Object() {b_id, c_id, c_step, c_depth, regdate, subject, writer, email, readcount, downcount, filename, filesize, password}
            Me.Rows.Add(rowboardlistRow)
            Return rowboardlistRow
        End Function
        
        Public Function FindByb_idc_idc_step(ByVal b_id As String, ByVal c_id As Integer, ByVal c_step As Integer) As boardlistRow
            Return CType(Me.Rows.Find(New Object() {b_id, c_id, c_step}),boardlistRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As boardlistDataTable = CType(MyBase.Clone,boardlistDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Friend Sub InitVars()
            Me.columnb_id = Me.Columns("b_id")
            Me.columnc_id = Me.Columns("c_id")
            Me.columnc_step = Me.Columns("c_step")
            Me.columnc_depth = Me.Columns("c_depth")
            Me.columnregdate = Me.Columns("regdate")
            Me.columnsubject = Me.Columns("subject")
            Me.columnwriter = Me.Columns("writer")
            Me.columnemail = Me.Columns("email")
            Me.columnreadcount = Me.Columns("readcount")
            Me.columndowncount = Me.Columns("downcount")
            Me.columnfilename = Me.Columns("filename")
            Me.columnfilesize = Me.Columns("filesize")
            Me.columnpassword = Me.Columns("password")
        End Sub
        
        Private Sub InitClass()
            Me.columnb_id = New DataColumn("b_id", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnb_id)
            Me.columnc_id = New DataColumn("c_id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnc_id)
            Me.columnc_step = New DataColumn("c_step", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnc_step)
            Me.columnc_depth = New DataColumn("c_depth", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnc_depth)
            Me.columnregdate = New DataColumn("regdate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnregdate)
            Me.columnsubject = New DataColumn("subject", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsubject)
            Me.columnwriter = New DataColumn("writer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnwriter)
            Me.columnemail = New DataColumn("email", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemail)
            Me.columnreadcount = New DataColumn("readcount", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnreadcount)
            Me.columndowncount = New DataColumn("downcount", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndowncount)
            Me.columnfilename = New DataColumn("filename", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfilename)
            Me.columnfilesize = New DataColumn("filesize", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfilesize)
            Me.columnpassword = New DataColumn("password", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpassword)
            Me.Constraints.Add(New UniqueConstraint("dsBoardKey2", New DataColumn() {Me.columnb_id, Me.columnc_id, Me.columnc_step}, true))
            Me.columnb_id.AllowDBNull = false
            Me.columnc_id.AllowDBNull = false
            Me.columnc_step.AllowDBNull = false
            Me.columnc_depth.AllowDBNull = false
            Me.columnregdate.AllowDBNull = false
            Me.columnwriter.AllowDBNull = false
            Me.columnreadcount.AllowDBNull = false
            Me.columndowncount.AllowDBNull = false
            Me.columnpassword.AllowDBNull = false
        End Sub
        
        Public Function NewboardlistRow() As boardlistRow
            Return CType(Me.NewRow,boardlistRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New boardlistRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(boardlistRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.boardlistRowChangedEvent) Is Nothing) Then
                RaiseEvent boardlistRowChanged(Me, New boardlistRowChangeEvent(CType(e.Row,boardlistRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.boardlistRowChangingEvent) Is Nothing) Then
                RaiseEvent boardlistRowChanging(Me, New boardlistRowChangeEvent(CType(e.Row,boardlistRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.boardlistRowDeletedEvent) Is Nothing) Then
                RaiseEvent boardlistRowDeleted(Me, New boardlistRowChangeEvent(CType(e.Row,boardlistRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.boardlistRowDeletingEvent) Is Nothing) Then
                RaiseEvent boardlistRowDeleting(Me, New boardlistRowChangeEvent(CType(e.Row,boardlistRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveboardlistRow(ByVal row As boardlistRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class boardlistRow
        Inherits DataRow
        
        Private tableboardlist As boardlistDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableboardlist = CType(Me.Table,boardlistDataTable)
        End Sub
        
        Public Property b_id As String
            Get
                Return CType(Me(Me.tableboardlist.b_idColumn),String)
            End Get
            Set
                Me(Me.tableboardlist.b_idColumn) = value
            End Set
        End Property
        
        Public Property c_id As Integer
            Get
                Return CType(Me(Me.tableboardlist.c_idColumn),Integer)
            End Get
            Set
                Me(Me.tableboardlist.c_idColumn) = value
            End Set
        End Property
        
        Public Property c_step As Integer
            Get
                Return CType(Me(Me.tableboardlist.c_stepColumn),Integer)
            End Get
            Set
                Me(Me.tableboardlist.c_stepColumn) = value
            End Set
        End Property
        
        Public Property c_depth As Integer
            Get
                Return CType(Me(Me.tableboardlist.c_depthColumn),Integer)
            End Get
            Set
                Me(Me.tableboardlist.c_depthColumn) = value
            End Set
        End Property
        
        Public Property regdate As Date
            Get
                Return CType(Me(Me.tableboardlist.regdateColumn),Date)
            End Get
            Set
                Me(Me.tableboardlist.regdateColumn) = value
            End Set
        End Property
        
        Public Property subject As String
            Get
                Try 
                    Return CType(Me(Me.tableboardlist.subjectColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableboardlist.subjectColumn) = value
            End Set
        End Property
        
        Public Property writer As String
            Get
                Return CType(Me(Me.tableboardlist.writerColumn),String)
            End Get
            Set
                Me(Me.tableboardlist.writerColumn) = value
            End Set
        End Property
        
        Public Property email As String
            Get
                Try 
                    Return CType(Me(Me.tableboardlist.emailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableboardlist.emailColumn) = value
            End Set
        End Property
        
        Public Property readcount As Integer
            Get
                Return CType(Me(Me.tableboardlist.readcountColumn),Integer)
            End Get
            Set
                Me(Me.tableboardlist.readcountColumn) = value
            End Set
        End Property
        
        Public Property downcount As Integer
            Get
                Return CType(Me(Me.tableboardlist.downcountColumn),Integer)
            End Get
            Set
                Me(Me.tableboardlist.downcountColumn) = value
            End Set
        End Property
        
        Public Property filename As String
            Get
                Try 
                    Return CType(Me(Me.tableboardlist.filenameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableboardlist.filenameColumn) = value
            End Set
        End Property
        
        Public Property filesize As String
            Get
                Try 
                    Return CType(Me(Me.tableboardlist.filesizeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableboardlist.filesizeColumn) = value
            End Set
        End Property
        
        Public Property password As String
            Get
                Return CType(Me(Me.tableboardlist.passwordColumn),String)
            End Get
            Set
                Me(Me.tableboardlist.passwordColumn) = value
            End Set
        End Property
        
        Public Function IssubjectNull() As Boolean
            Return Me.IsNull(Me.tableboardlist.subjectColumn)
        End Function
        
        Public Sub SetsubjectNull()
            Me(Me.tableboardlist.subjectColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsemailNull() As Boolean
            Return Me.IsNull(Me.tableboardlist.emailColumn)
        End Function
        
        Public Sub SetemailNull()
            Me(Me.tableboardlist.emailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfilenameNull() As Boolean
            Return Me.IsNull(Me.tableboardlist.filenameColumn)
        End Function
        
        Public Sub SetfilenameNull()
            Me(Me.tableboardlist.filenameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfilesizeNull() As Boolean
            Return Me.IsNull(Me.tableboardlist.filesizeColumn)
        End Function
        
        Public Sub SetfilesizeNull()
            Me(Me.tableboardlist.filesizeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class boardlistRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As boardlistRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As boardlistRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As boardlistRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GetArticleDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnb_id As DataColumn
        
        Private columnc_id As DataColumn
        
        Private columnc_step As DataColumn
        
        Private columnc_depth As DataColumn
        
        Private columnregdate As DataColumn
        
        Private columnsubject As DataColumn
        
        Private columnwriter As DataColumn
        
        Private columnemail As DataColumn
        
        Private columnreadcount As DataColumn
        
        Private columndowncount As DataColumn
        
        Private columnfilename As DataColumn
        
        Private columnfilesize As DataColumn
        
        Private columnpassword As DataColumn
        
        Private columncontent As DataColumn
        
        Friend Sub New()
            MyBase.New("GetArticle")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property b_idColumn As DataColumn
            Get
                Return Me.columnb_id
            End Get
        End Property
        
        Friend ReadOnly Property c_idColumn As DataColumn
            Get
                Return Me.columnc_id
            End Get
        End Property
        
        Friend ReadOnly Property c_stepColumn As DataColumn
            Get
                Return Me.columnc_step
            End Get
        End Property
        
        Friend ReadOnly Property c_depthColumn As DataColumn
            Get
                Return Me.columnc_depth
            End Get
        End Property
        
        Friend ReadOnly Property regdateColumn As DataColumn
            Get
                Return Me.columnregdate
            End Get
        End Property
        
        Friend ReadOnly Property subjectColumn As DataColumn
            Get
                Return Me.columnsubject
            End Get
        End Property
        
        Friend ReadOnly Property writerColumn As DataColumn
            Get
                Return Me.columnwriter
            End Get
        End Property
        
        Friend ReadOnly Property emailColumn As DataColumn
            Get
                Return Me.columnemail
            End Get
        End Property
        
        Friend ReadOnly Property readcountColumn As DataColumn
            Get
                Return Me.columnreadcount
            End Get
        End Property
        
        Friend ReadOnly Property downcountColumn As DataColumn
            Get
                Return Me.columndowncount
            End Get
        End Property
        
        Friend ReadOnly Property filenameColumn As DataColumn
            Get
                Return Me.columnfilename
            End Get
        End Property
        
        Friend ReadOnly Property filesizeColumn As DataColumn
            Get
                Return Me.columnfilesize
            End Get
        End Property
        
        Friend ReadOnly Property passwordColumn As DataColumn
            Get
                Return Me.columnpassword
            End Get
        End Property
        
        Friend ReadOnly Property contentColumn As DataColumn
            Get
                Return Me.columncontent
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GetArticleRow
            Get
                Return CType(Me.Rows(index),GetArticleRow)
            End Get
        End Property
        
        Public Event GetArticleRowChanged As GetArticleRowChangeEventHandler
        
        Public Event GetArticleRowChanging As GetArticleRowChangeEventHandler
        
        Public Event GetArticleRowDeleted As GetArticleRowChangeEventHandler
        
        Public Event GetArticleRowDeleting As GetArticleRowChangeEventHandler
        
        Public Overloads Sub AddGetArticleRow(ByVal row As GetArticleRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGetArticleRow(ByVal b_id As String, ByVal c_id As Integer, ByVal c_step As Integer, ByVal c_depth As Integer, ByVal regdate As Date, ByVal subject As String, ByVal writer As String, ByVal email As String, ByVal readcount As Integer, ByVal downcount As Integer, ByVal filename As String, ByVal filesize As String, ByVal password As String, ByVal content As String) As GetArticleRow
            Dim rowGetArticleRow As GetArticleRow = CType(Me.NewRow,GetArticleRow)
            rowGetArticleRow.ItemArray = New Object() {b_id, c_id, c_step, c_depth, regdate, subject, writer, email, readcount, downcount, filename, filesize, password, content}
            Me.Rows.Add(rowGetArticleRow)
            Return rowGetArticleRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GetArticleDataTable = CType(MyBase.Clone,GetArticleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Friend Sub InitVars()
            Me.columnb_id = Me.Columns("b_id")
            Me.columnc_id = Me.Columns("c_id")
            Me.columnc_step = Me.Columns("c_step")
            Me.columnc_depth = Me.Columns("c_depth")
            Me.columnregdate = Me.Columns("regdate")
            Me.columnsubject = Me.Columns("subject")
            Me.columnwriter = Me.Columns("writer")
            Me.columnemail = Me.Columns("email")
            Me.columnreadcount = Me.Columns("readcount")
            Me.columndowncount = Me.Columns("downcount")
            Me.columnfilename = Me.Columns("filename")
            Me.columnfilesize = Me.Columns("filesize")
            Me.columnpassword = Me.Columns("password")
            Me.columncontent = Me.Columns("content")
        End Sub
        
        Private Sub InitClass()
            Me.columnb_id = New DataColumn("b_id", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnb_id)
            Me.columnc_id = New DataColumn("c_id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnc_id)
            Me.columnc_step = New DataColumn("c_step", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnc_step)
            Me.columnc_depth = New DataColumn("c_depth", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnc_depth)
            Me.columnregdate = New DataColumn("regdate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnregdate)
            Me.columnsubject = New DataColumn("subject", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsubject)
            Me.columnwriter = New DataColumn("writer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnwriter)
            Me.columnemail = New DataColumn("email", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemail)
            Me.columnreadcount = New DataColumn("readcount", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnreadcount)
            Me.columndowncount = New DataColumn("downcount", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndowncount)
            Me.columnfilename = New DataColumn("filename", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfilename)
            Me.columnfilesize = New DataColumn("filesize", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfilesize)
            Me.columnpassword = New DataColumn("password", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpassword)
            Me.columncontent = New DataColumn("content", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncontent)
            Me.columnb_id.AllowDBNull = false
            Me.columnc_id.AllowDBNull = false
            Me.columnc_step.AllowDBNull = false
            Me.columnc_depth.AllowDBNull = false
            Me.columnregdate.AllowDBNull = false
            Me.columnwriter.AllowDBNull = false
            Me.columnreadcount.AllowDBNull = false
            Me.columndowncount.AllowDBNull = false
            Me.columnpassword.AllowDBNull = false
        End Sub
        
        Public Function NewGetArticleRow() As GetArticleRow
            Return CType(Me.NewRow,GetArticleRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GetArticleRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GetArticleRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GetArticleRowChangedEvent) Is Nothing) Then
                RaiseEvent GetArticleRowChanged(Me, New GetArticleRowChangeEvent(CType(e.Row,GetArticleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GetArticleRowChangingEvent) Is Nothing) Then
                RaiseEvent GetArticleRowChanging(Me, New GetArticleRowChangeEvent(CType(e.Row,GetArticleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GetArticleRowDeletedEvent) Is Nothing) Then
                RaiseEvent GetArticleRowDeleted(Me, New GetArticleRowChangeEvent(CType(e.Row,GetArticleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GetArticleRowDeletingEvent) Is Nothing) Then
                RaiseEvent GetArticleRowDeleting(Me, New GetArticleRowChangeEvent(CType(e.Row,GetArticleRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGetArticleRow(ByVal row As GetArticleRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GetArticleRow
        Inherits DataRow
        
        Private tableGetArticle As GetArticleDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGetArticle = CType(Me.Table,GetArticleDataTable)
        End Sub
        
        Public Property b_id As String
            Get
                Return CType(Me(Me.tableGetArticle.b_idColumn),String)
            End Get
            Set
                Me(Me.tableGetArticle.b_idColumn) = value
            End Set
        End Property
        
        Public Property c_id As Integer
            Get
                Return CType(Me(Me.tableGetArticle.c_idColumn),Integer)
            End Get
            Set
                Me(Me.tableGetArticle.c_idColumn) = value
            End Set
        End Property
        
        Public Property c_step As Integer
            Get
                Return CType(Me(Me.tableGetArticle.c_stepColumn),Integer)
            End Get
            Set
                Me(Me.tableGetArticle.c_stepColumn) = value
            End Set
        End Property
        
        Public Property c_depth As Integer
            Get
                Return CType(Me(Me.tableGetArticle.c_depthColumn),Integer)
            End Get
            Set
                Me(Me.tableGetArticle.c_depthColumn) = value
            End Set
        End Property
        
        Public Property regdate As Date
            Get
                Return CType(Me(Me.tableGetArticle.regdateColumn),Date)
            End Get
            Set
                Me(Me.tableGetArticle.regdateColumn) = value
            End Set
        End Property
        
        Public Property subject As String
            Get
                Try 
                    Return CType(Me(Me.tableGetArticle.subjectColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGetArticle.subjectColumn) = value
            End Set
        End Property
        
        Public Property writer As String
            Get
                Return CType(Me(Me.tableGetArticle.writerColumn),String)
            End Get
            Set
                Me(Me.tableGetArticle.writerColumn) = value
            End Set
        End Property
        
        Public Property email As String
            Get
                Try 
                    Return CType(Me(Me.tableGetArticle.emailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGetArticle.emailColumn) = value
            End Set
        End Property
        
        Public Property readcount As Integer
            Get
                Return CType(Me(Me.tableGetArticle.readcountColumn),Integer)
            End Get
            Set
                Me(Me.tableGetArticle.readcountColumn) = value
            End Set
        End Property
        
        Public Property downcount As Integer
            Get
                Return CType(Me(Me.tableGetArticle.downcountColumn),Integer)
            End Get
            Set
                Me(Me.tableGetArticle.downcountColumn) = value
            End Set
        End Property
        
        Public Property filename As String
            Get
                Try 
                    Return CType(Me(Me.tableGetArticle.filenameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGetArticle.filenameColumn) = value
            End Set
        End Property
        
        Public Property filesize As String
            Get
                Try 
                    Return CType(Me(Me.tableGetArticle.filesizeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGetArticle.filesizeColumn) = value
            End Set
        End Property
        
        Public Property password As String
            Get
                Return CType(Me(Me.tableGetArticle.passwordColumn),String)
            End Get
            Set
                Me(Me.tableGetArticle.passwordColumn) = value
            End Set
        End Property
        
        Public Property content As String
            Get
                Try 
                    Return CType(Me(Me.tableGetArticle.contentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGetArticle.contentColumn) = value
            End Set
        End Property
        
        Public Function IssubjectNull() As Boolean
            Return Me.IsNull(Me.tableGetArticle.subjectColumn)
        End Function
        
        Public Sub SetsubjectNull()
            Me(Me.tableGetArticle.subjectColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsemailNull() As Boolean
            Return Me.IsNull(Me.tableGetArticle.emailColumn)
        End Function
        
        Public Sub SetemailNull()
            Me(Me.tableGetArticle.emailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfilenameNull() As Boolean
            Return Me.IsNull(Me.tableGetArticle.filenameColumn)
        End Function
        
        Public Sub SetfilenameNull()
            Me(Me.tableGetArticle.filenameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfilesizeNull() As Boolean
            Return Me.IsNull(Me.tableGetArticle.filesizeColumn)
        End Function
        
        Public Sub SetfilesizeNull()
            Me(Me.tableGetArticle.filesizeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscontentNull() As Boolean
            Return Me.IsNull(Me.tableGetArticle.contentColumn)
        End Function
        
        Public Sub SetcontentNull()
            Me(Me.tableGetArticle.contentColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GetArticleRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GetArticleRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GetArticleRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GetArticleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
