//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3328.4
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace BizBoard {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsBoard : DataSet {
        
        private boardcontentDataTable tableboardcontent;
        
        private boardlistDataTable tableboardlist;
        
        private boardmasterDataTable tableboardmaster;
        
        private GetArticleDataTable tableGetArticle;
        
        public dsBoard() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsBoard(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["boardcontent"] != null)) {
                    this.Tables.Add(new boardcontentDataTable(ds.Tables["boardcontent"]));
                }
                if ((ds.Tables["boardlist"] != null)) {
                    this.Tables.Add(new boardlistDataTable(ds.Tables["boardlist"]));
                }
                if ((ds.Tables["boardmaster"] != null)) {
                    this.Tables.Add(new boardmasterDataTable(ds.Tables["boardmaster"]));
                }
                if ((ds.Tables["GetArticle"] != null)) {
                    this.Tables.Add(new GetArticleDataTable(ds.Tables["GetArticle"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public boardcontentDataTable boardcontent {
            get {
                return this.tableboardcontent;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public boardlistDataTable boardlist {
            get {
                return this.tableboardlist;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public boardmasterDataTable boardmaster {
            get {
                return this.tableboardmaster;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetArticleDataTable GetArticle {
            get {
                return this.tableGetArticle;
            }
        }
        
        public override DataSet Clone() {
            dsBoard cln = ((dsBoard)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["boardcontent"] != null)) {
                this.Tables.Add(new boardcontentDataTable(ds.Tables["boardcontent"]));
            }
            if ((ds.Tables["boardlist"] != null)) {
                this.Tables.Add(new boardlistDataTable(ds.Tables["boardlist"]));
            }
            if ((ds.Tables["boardmaster"] != null)) {
                this.Tables.Add(new boardmasterDataTable(ds.Tables["boardmaster"]));
            }
            if ((ds.Tables["GetArticle"] != null)) {
                this.Tables.Add(new GetArticleDataTable(ds.Tables["GetArticle"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableboardcontent = ((boardcontentDataTable)(this.Tables["boardcontent"]));
            if ((this.tableboardcontent != null)) {
                this.tableboardcontent.InitVars();
            }
            this.tableboardlist = ((boardlistDataTable)(this.Tables["boardlist"]));
            if ((this.tableboardlist != null)) {
                this.tableboardlist.InitVars();
            }
            this.tableboardmaster = ((boardmasterDataTable)(this.Tables["boardmaster"]));
            if ((this.tableboardmaster != null)) {
                this.tableboardmaster.InitVars();
            }
            this.tableGetArticle = ((GetArticleDataTable)(this.Tables["GetArticle"]));
            if ((this.tableGetArticle != null)) {
                this.tableGetArticle.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsBoard";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsBoard.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableboardcontent = new boardcontentDataTable();
            this.Tables.Add(this.tableboardcontent);
            this.tableboardlist = new boardlistDataTable();
            this.Tables.Add(this.tableboardlist);
            this.tableboardmaster = new boardmasterDataTable();
            this.Tables.Add(this.tableboardmaster);
            this.tableGetArticle = new GetArticleDataTable();
            this.Tables.Add(this.tableGetArticle);
        }
        
        private bool ShouldSerializeboardcontent() {
            return false;
        }
        
        private bool ShouldSerializeboardlist() {
            return false;
        }
        
        private bool ShouldSerializeboardmaster() {
            return false;
        }
        
        private bool ShouldSerializeGetArticle() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void boardcontentRowChangeEventHandler(object sender, boardcontentRowChangeEvent e);
        
        public delegate void boardlistRowChangeEventHandler(object sender, boardlistRowChangeEvent e);
        
        public delegate void boardmasterRowChangeEventHandler(object sender, boardmasterRowChangeEvent e);
        
        public delegate void GetArticleRowChangeEventHandler(object sender, GetArticleRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class boardcontentDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnb_id;
            
            private DataColumn columnc_id;
            
            private DataColumn columnc_step;
            
            private DataColumn columncontent;
            
            internal boardcontentDataTable() : 
                    base("boardcontent") {
                this.InitClass();
            }
            
            internal boardcontentDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn b_idColumn {
                get {
                    return this.columnb_id;
                }
            }
            
            internal DataColumn c_idColumn {
                get {
                    return this.columnc_id;
                }
            }
            
            internal DataColumn c_stepColumn {
                get {
                    return this.columnc_step;
                }
            }
            
            internal DataColumn contentColumn {
                get {
                    return this.columncontent;
                }
            }
            
            public boardcontentRow this[int index] {
                get {
                    return ((boardcontentRow)(this.Rows[index]));
                }
            }
            
            public event boardcontentRowChangeEventHandler boardcontentRowChanged;
            
            public event boardcontentRowChangeEventHandler boardcontentRowChanging;
            
            public event boardcontentRowChangeEventHandler boardcontentRowDeleted;
            
            public event boardcontentRowChangeEventHandler boardcontentRowDeleting;
            
            public void AddboardcontentRow(boardcontentRow row) {
                this.Rows.Add(row);
            }
            
            public boardcontentRow AddboardcontentRow(string b_id, int c_id, int c_step, string content) {
                boardcontentRow rowboardcontentRow = ((boardcontentRow)(this.NewRow()));
                rowboardcontentRow.ItemArray = new object[] {
                        b_id,
                        c_id,
                        c_step,
                        content};
                this.Rows.Add(rowboardcontentRow);
                return rowboardcontentRow;
            }
            
            public boardcontentRow FindByb_idc_idc_step(string b_id, int c_id, int c_step) {
                return ((boardcontentRow)(this.Rows.Find(new object[] {
                            b_id,
                            c_id,
                            c_step})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                boardcontentDataTable cln = ((boardcontentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            internal void InitVars() {
                this.columnb_id = this.Columns["b_id"];
                this.columnc_id = this.Columns["c_id"];
                this.columnc_step = this.Columns["c_step"];
                this.columncontent = this.Columns["content"];
            }
            
            private void InitClass() {
                this.columnb_id = new DataColumn("b_id", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnb_id);
                this.columnc_id = new DataColumn("c_id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_id);
                this.columnc_step = new DataColumn("c_step", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_step);
                this.columncontent = new DataColumn("content", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncontent);
                this.Constraints.Add(new UniqueConstraint("dsBoardKey1", new DataColumn[] {
                                this.columnb_id,
                                this.columnc_id,
                                this.columnc_step}, true));
                this.columnb_id.AllowDBNull = false;
                this.columnc_id.AllowDBNull = false;
                this.columnc_step.AllowDBNull = false;
            }
            
            public boardcontentRow NewboardcontentRow() {
                return ((boardcontentRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new boardcontentRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(boardcontentRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.boardcontentRowChanged != null)) {
                    this.boardcontentRowChanged(this, new boardcontentRowChangeEvent(((boardcontentRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.boardcontentRowChanging != null)) {
                    this.boardcontentRowChanging(this, new boardcontentRowChangeEvent(((boardcontentRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.boardcontentRowDeleted != null)) {
                    this.boardcontentRowDeleted(this, new boardcontentRowChangeEvent(((boardcontentRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.boardcontentRowDeleting != null)) {
                    this.boardcontentRowDeleting(this, new boardcontentRowChangeEvent(((boardcontentRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveboardcontentRow(boardcontentRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class boardcontentRow : DataRow {
            
            private boardcontentDataTable tableboardcontent;
            
            internal boardcontentRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableboardcontent = ((boardcontentDataTable)(this.Table));
            }
            
            public string b_id {
                get {
                    return ((string)(this[this.tableboardcontent.b_idColumn]));
                }
                set {
                    this[this.tableboardcontent.b_idColumn] = value;
                }
            }
            
            public int c_id {
                get {
                    return ((int)(this[this.tableboardcontent.c_idColumn]));
                }
                set {
                    this[this.tableboardcontent.c_idColumn] = value;
                }
            }
            
            public int c_step {
                get {
                    return ((int)(this[this.tableboardcontent.c_stepColumn]));
                }
                set {
                    this[this.tableboardcontent.c_stepColumn] = value;
                }
            }
            
            public string content {
                get {
                    try {
                        return ((string)(this[this.tableboardcontent.contentColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableboardcontent.contentColumn] = value;
                }
            }
            
            public bool IscontentNull() {
                return this.IsNull(this.tableboardcontent.contentColumn);
            }
            
            public void SetcontentNull() {
                this[this.tableboardcontent.contentColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class boardcontentRowChangeEvent : EventArgs {
            
            private boardcontentRow eventRow;
            
            private DataRowAction eventAction;
            
            public boardcontentRowChangeEvent(boardcontentRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public boardcontentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class boardlistDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnb_id;
            
            private DataColumn columnc_id;
            
            private DataColumn columnc_step;
            
            private DataColumn columnc_depth;
            
            private DataColumn columnregdate;
            
            private DataColumn columnsubject;
            
            private DataColumn columnwriter;
            
            private DataColumn columnemail;
            
            private DataColumn columnreadcount;
            
            private DataColumn columndowncount;
            
            private DataColumn columnfilename;
            
            private DataColumn columnfilesize;
            
            private DataColumn columnpassword;
            
            internal boardlistDataTable() : 
                    base("boardlist") {
                this.InitClass();
            }
            
            internal boardlistDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn b_idColumn {
                get {
                    return this.columnb_id;
                }
            }
            
            internal DataColumn c_idColumn {
                get {
                    return this.columnc_id;
                }
            }
            
            internal DataColumn c_stepColumn {
                get {
                    return this.columnc_step;
                }
            }
            
            internal DataColumn c_depthColumn {
                get {
                    return this.columnc_depth;
                }
            }
            
            internal DataColumn regdateColumn {
                get {
                    return this.columnregdate;
                }
            }
            
            internal DataColumn subjectColumn {
                get {
                    return this.columnsubject;
                }
            }
            
            internal DataColumn writerColumn {
                get {
                    return this.columnwriter;
                }
            }
            
            internal DataColumn emailColumn {
                get {
                    return this.columnemail;
                }
            }
            
            internal DataColumn readcountColumn {
                get {
                    return this.columnreadcount;
                }
            }
            
            internal DataColumn downcountColumn {
                get {
                    return this.columndowncount;
                }
            }
            
            internal DataColumn filenameColumn {
                get {
                    return this.columnfilename;
                }
            }
            
            internal DataColumn filesizeColumn {
                get {
                    return this.columnfilesize;
                }
            }
            
            internal DataColumn passwordColumn {
                get {
                    return this.columnpassword;
                }
            }
            
            public boardlistRow this[int index] {
                get {
                    return ((boardlistRow)(this.Rows[index]));
                }
            }
            
            public event boardlistRowChangeEventHandler boardlistRowChanged;
            
            public event boardlistRowChangeEventHandler boardlistRowChanging;
            
            public event boardlistRowChangeEventHandler boardlistRowDeleted;
            
            public event boardlistRowChangeEventHandler boardlistRowDeleting;
            
            public void AddboardlistRow(boardlistRow row) {
                this.Rows.Add(row);
            }
            
            public boardlistRow AddboardlistRow(string b_id, int c_id, int c_step, int c_depth, System.DateTime regdate, string subject, string writer, string email, int readcount, int downcount, string filename, string filesize, string password) {
                boardlistRow rowboardlistRow = ((boardlistRow)(this.NewRow()));
                rowboardlistRow.ItemArray = new object[] {
                        b_id,
                        c_id,
                        c_step,
                        c_depth,
                        regdate,
                        subject,
                        writer,
                        email,
                        readcount,
                        downcount,
                        filename,
                        filesize,
                        password};
                this.Rows.Add(rowboardlistRow);
                return rowboardlistRow;
            }
            
            public boardlistRow FindByb_idc_idc_step(string b_id, int c_id, int c_step) {
                return ((boardlistRow)(this.Rows.Find(new object[] {
                            b_id,
                            c_id,
                            c_step})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                boardlistDataTable cln = ((boardlistDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            internal void InitVars() {
                this.columnb_id = this.Columns["b_id"];
                this.columnc_id = this.Columns["c_id"];
                this.columnc_step = this.Columns["c_step"];
                this.columnc_depth = this.Columns["c_depth"];
                this.columnregdate = this.Columns["regdate"];
                this.columnsubject = this.Columns["subject"];
                this.columnwriter = this.Columns["writer"];
                this.columnemail = this.Columns["email"];
                this.columnreadcount = this.Columns["readcount"];
                this.columndowncount = this.Columns["downcount"];
                this.columnfilename = this.Columns["filename"];
                this.columnfilesize = this.Columns["filesize"];
                this.columnpassword = this.Columns["password"];
            }
            
            private void InitClass() {
                this.columnb_id = new DataColumn("b_id", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnb_id);
                this.columnc_id = new DataColumn("c_id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_id);
                this.columnc_step = new DataColumn("c_step", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_step);
                this.columnc_depth = new DataColumn("c_depth", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_depth);
                this.columnregdate = new DataColumn("regdate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnregdate);
                this.columnsubject = new DataColumn("subject", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsubject);
                this.columnwriter = new DataColumn("writer", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnwriter);
                this.columnemail = new DataColumn("email", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnemail);
                this.columnreadcount = new DataColumn("readcount", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnreadcount);
                this.columndowncount = new DataColumn("downcount", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndowncount);
                this.columnfilename = new DataColumn("filename", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfilename);
                this.columnfilesize = new DataColumn("filesize", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfilesize);
                this.columnpassword = new DataColumn("password", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpassword);
                this.Constraints.Add(new UniqueConstraint("dsBoardKey2", new DataColumn[] {
                                this.columnb_id,
                                this.columnc_id,
                                this.columnc_step}, true));
                this.columnb_id.AllowDBNull = false;
                this.columnc_id.AllowDBNull = false;
                this.columnc_step.AllowDBNull = false;
                this.columnc_depth.AllowDBNull = false;
                this.columnregdate.AllowDBNull = false;
                this.columnwriter.AllowDBNull = false;
                this.columnreadcount.AllowDBNull = false;
                this.columndowncount.AllowDBNull = false;
                this.columnpassword.AllowDBNull = false;
            }
            
            public boardlistRow NewboardlistRow() {
                return ((boardlistRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new boardlistRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(boardlistRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.boardlistRowChanged != null)) {
                    this.boardlistRowChanged(this, new boardlistRowChangeEvent(((boardlistRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.boardlistRowChanging != null)) {
                    this.boardlistRowChanging(this, new boardlistRowChangeEvent(((boardlistRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.boardlistRowDeleted != null)) {
                    this.boardlistRowDeleted(this, new boardlistRowChangeEvent(((boardlistRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.boardlistRowDeleting != null)) {
                    this.boardlistRowDeleting(this, new boardlistRowChangeEvent(((boardlistRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveboardlistRow(boardlistRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class boardlistRow : DataRow {
            
            private boardlistDataTable tableboardlist;
            
            internal boardlistRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableboardlist = ((boardlistDataTable)(this.Table));
            }
            
            public string b_id {
                get {
                    return ((string)(this[this.tableboardlist.b_idColumn]));
                }
                set {
                    this[this.tableboardlist.b_idColumn] = value;
                }
            }
            
            public int c_id {
                get {
                    return ((int)(this[this.tableboardlist.c_idColumn]));
                }
                set {
                    this[this.tableboardlist.c_idColumn] = value;
                }
            }
            
            public int c_step {
                get {
                    return ((int)(this[this.tableboardlist.c_stepColumn]));
                }
                set {
                    this[this.tableboardlist.c_stepColumn] = value;
                }
            }
            
            public int c_depth {
                get {
                    return ((int)(this[this.tableboardlist.c_depthColumn]));
                }
                set {
                    this[this.tableboardlist.c_depthColumn] = value;
                }
            }
            
            public System.DateTime regdate {
                get {
                    return ((System.DateTime)(this[this.tableboardlist.regdateColumn]));
                }
                set {
                    this[this.tableboardlist.regdateColumn] = value;
                }
            }
            
            public string subject {
                get {
                    try {
                        return ((string)(this[this.tableboardlist.subjectColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableboardlist.subjectColumn] = value;
                }
            }
            
            public string writer {
                get {
                    return ((string)(this[this.tableboardlist.writerColumn]));
                }
                set {
                    this[this.tableboardlist.writerColumn] = value;
                }
            }
            
            public string email {
                get {
                    try {
                        return ((string)(this[this.tableboardlist.emailColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableboardlist.emailColumn] = value;
                }
            }
            
            public int readcount {
                get {
                    return ((int)(this[this.tableboardlist.readcountColumn]));
                }
                set {
                    this[this.tableboardlist.readcountColumn] = value;
                }
            }
            
            public int downcount {
                get {
                    return ((int)(this[this.tableboardlist.downcountColumn]));
                }
                set {
                    this[this.tableboardlist.downcountColumn] = value;
                }
            }
            
            public string filename {
                get {
                    try {
                        return ((string)(this[this.tableboardlist.filenameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableboardlist.filenameColumn] = value;
                }
            }
            
            public string filesize {
                get {
                    try {
                        return ((string)(this[this.tableboardlist.filesizeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableboardlist.filesizeColumn] = value;
                }
            }
            
            public string password {
                get {
                    return ((string)(this[this.tableboardlist.passwordColumn]));
                }
                set {
                    this[this.tableboardlist.passwordColumn] = value;
                }
            }
            
            public bool IssubjectNull() {
                return this.IsNull(this.tableboardlist.subjectColumn);
            }
            
            public void SetsubjectNull() {
                this[this.tableboardlist.subjectColumn] = System.Convert.DBNull;
            }
            
            public bool IsemailNull() {
                return this.IsNull(this.tableboardlist.emailColumn);
            }
            
            public void SetemailNull() {
                this[this.tableboardlist.emailColumn] = System.Convert.DBNull;
            }
            
            public bool IsfilenameNull() {
                return this.IsNull(this.tableboardlist.filenameColumn);
            }
            
            public void SetfilenameNull() {
                this[this.tableboardlist.filenameColumn] = System.Convert.DBNull;
            }
            
            public bool IsfilesizeNull() {
                return this.IsNull(this.tableboardlist.filesizeColumn);
            }
            
            public void SetfilesizeNull() {
                this[this.tableboardlist.filesizeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class boardlistRowChangeEvent : EventArgs {
            
            private boardlistRow eventRow;
            
            private DataRowAction eventAction;
            
            public boardlistRowChangeEvent(boardlistRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public boardlistRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class boardmasterDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnb_id;
            
            private DataColumn columntitle;
            
            private DataColumn columnpagesize;
            
            private DataColumn columnadminpw;
            
            private DataColumn column_readonly;
            
            internal boardmasterDataTable() : 
                    base("boardmaster") {
                this.InitClass();
            }
            
            internal boardmasterDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn b_idColumn {
                get {
                    return this.columnb_id;
                }
            }
            
            internal DataColumn titleColumn {
                get {
                    return this.columntitle;
                }
            }
            
            internal DataColumn pagesizeColumn {
                get {
                    return this.columnpagesize;
                }
            }
            
            internal DataColumn adminpwColumn {
                get {
                    return this.columnadminpw;
                }
            }
            
            internal DataColumn _readonlyColumn {
                get {
                    return this.column_readonly;
                }
            }
            
            public boardmasterRow this[int index] {
                get {
                    return ((boardmasterRow)(this.Rows[index]));
                }
            }
            
            public event boardmasterRowChangeEventHandler boardmasterRowChanged;
            
            public event boardmasterRowChangeEventHandler boardmasterRowChanging;
            
            public event boardmasterRowChangeEventHandler boardmasterRowDeleted;
            
            public event boardmasterRowChangeEventHandler boardmasterRowDeleting;
            
            public void AddboardmasterRow(boardmasterRow row) {
                this.Rows.Add(row);
            }
            
            public boardmasterRow AddboardmasterRow(string b_id, string title, int pagesize, string adminpw, string _readonly) {
                boardmasterRow rowboardmasterRow = ((boardmasterRow)(this.NewRow()));
                rowboardmasterRow.ItemArray = new object[] {
                        b_id,
                        title,
                        pagesize,
                        adminpw,
                        _readonly};
                this.Rows.Add(rowboardmasterRow);
                return rowboardmasterRow;
            }
            
            public boardmasterRow FindByb_id(string b_id) {
                return ((boardmasterRow)(this.Rows.Find(new object[] {
                            b_id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                boardmasterDataTable cln = ((boardmasterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            internal void InitVars() {
                this.columnb_id = this.Columns["b_id"];
                this.columntitle = this.Columns["title"];
                this.columnpagesize = this.Columns["pagesize"];
                this.columnadminpw = this.Columns["adminpw"];
                this.column_readonly = this.Columns["readonly"];
            }
            
            private void InitClass() {
                this.columnb_id = new DataColumn("b_id", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnb_id);
                this.columntitle = new DataColumn("title", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntitle);
                this.columnpagesize = new DataColumn("pagesize", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpagesize);
                this.columnadminpw = new DataColumn("adminpw", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnadminpw);
                this.column_readonly = new DataColumn("readonly", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column_readonly);
                this.Constraints.Add(new UniqueConstraint("dsBoardKey3", new DataColumn[] {
                                this.columnb_id}, true));
                this.columnb_id.AllowDBNull = false;
                this.columnb_id.Unique = true;
                this.columntitle.AllowDBNull = false;
                this.columnpagesize.AllowDBNull = false;
                this.columnadminpw.AllowDBNull = false;
                this.column_readonly.AllowDBNull = false;
            }
            
            public boardmasterRow NewboardmasterRow() {
                return ((boardmasterRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new boardmasterRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(boardmasterRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.boardmasterRowChanged != null)) {
                    this.boardmasterRowChanged(this, new boardmasterRowChangeEvent(((boardmasterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.boardmasterRowChanging != null)) {
                    this.boardmasterRowChanging(this, new boardmasterRowChangeEvent(((boardmasterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.boardmasterRowDeleted != null)) {
                    this.boardmasterRowDeleted(this, new boardmasterRowChangeEvent(((boardmasterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.boardmasterRowDeleting != null)) {
                    this.boardmasterRowDeleting(this, new boardmasterRowChangeEvent(((boardmasterRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveboardmasterRow(boardmasterRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class boardmasterRow : DataRow {
            
            private boardmasterDataTable tableboardmaster;
            
            internal boardmasterRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableboardmaster = ((boardmasterDataTable)(this.Table));
            }
            
            public string b_id {
                get {
                    return ((string)(this[this.tableboardmaster.b_idColumn]));
                }
                set {
                    this[this.tableboardmaster.b_idColumn] = value;
                }
            }
            
            public string title {
                get {
                    return ((string)(this[this.tableboardmaster.titleColumn]));
                }
                set {
                    this[this.tableboardmaster.titleColumn] = value;
                }
            }
            
            public int pagesize {
                get {
                    return ((int)(this[this.tableboardmaster.pagesizeColumn]));
                }
                set {
                    this[this.tableboardmaster.pagesizeColumn] = value;
                }
            }
            
            public string adminpw {
                get {
                    return ((string)(this[this.tableboardmaster.adminpwColumn]));
                }
                set {
                    this[this.tableboardmaster.adminpwColumn] = value;
                }
            }
            
            public string _readonly {
                get {
                    return ((string)(this[this.tableboardmaster._readonlyColumn]));
                }
                set {
                    this[this.tableboardmaster._readonlyColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class boardmasterRowChangeEvent : EventArgs {
            
            private boardmasterRow eventRow;
            
            private DataRowAction eventAction;
            
            public boardmasterRowChangeEvent(boardmasterRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public boardmasterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GetArticleDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnb_id;
            
            private DataColumn columnc_id;
            
            private DataColumn columnc_step;
            
            private DataColumn columnc_depth;
            
            private DataColumn columnregdate;
            
            private DataColumn columnsubject;
            
            private DataColumn columnwriter;
            
            private DataColumn columnemail;
            
            private DataColumn columnreadcount;
            
            private DataColumn columndowncount;
            
            private DataColumn columnfilename;
            
            private DataColumn columnfilesize;
            
            private DataColumn columnpassword;
            
            private DataColumn columncontent;
            
            internal GetArticleDataTable() : 
                    base("GetArticle") {
                this.InitClass();
            }
            
            internal GetArticleDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn b_idColumn {
                get {
                    return this.columnb_id;
                }
            }
            
            internal DataColumn c_idColumn {
                get {
                    return this.columnc_id;
                }
            }
            
            internal DataColumn c_stepColumn {
                get {
                    return this.columnc_step;
                }
            }
            
            internal DataColumn c_depthColumn {
                get {
                    return this.columnc_depth;
                }
            }
            
            internal DataColumn regdateColumn {
                get {
                    return this.columnregdate;
                }
            }
            
            internal DataColumn subjectColumn {
                get {
                    return this.columnsubject;
                }
            }
            
            internal DataColumn writerColumn {
                get {
                    return this.columnwriter;
                }
            }
            
            internal DataColumn emailColumn {
                get {
                    return this.columnemail;
                }
            }
            
            internal DataColumn readcountColumn {
                get {
                    return this.columnreadcount;
                }
            }
            
            internal DataColumn downcountColumn {
                get {
                    return this.columndowncount;
                }
            }
            
            internal DataColumn filenameColumn {
                get {
                    return this.columnfilename;
                }
            }
            
            internal DataColumn filesizeColumn {
                get {
                    return this.columnfilesize;
                }
            }
            
            internal DataColumn passwordColumn {
                get {
                    return this.columnpassword;
                }
            }
            
            internal DataColumn contentColumn {
                get {
                    return this.columncontent;
                }
            }
            
            public GetArticleRow this[int index] {
                get {
                    return ((GetArticleRow)(this.Rows[index]));
                }
            }
            
            public event GetArticleRowChangeEventHandler GetArticleRowChanged;
            
            public event GetArticleRowChangeEventHandler GetArticleRowChanging;
            
            public event GetArticleRowChangeEventHandler GetArticleRowDeleted;
            
            public event GetArticleRowChangeEventHandler GetArticleRowDeleting;
            
            public void AddGetArticleRow(GetArticleRow row) {
                this.Rows.Add(row);
            }
            
            public GetArticleRow AddGetArticleRow(string b_id, int c_id, int c_step, int c_depth, System.DateTime regdate, string subject, string writer, string email, int readcount, int downcount, string filename, string filesize, string password, string content) {
                GetArticleRow rowGetArticleRow = ((GetArticleRow)(this.NewRow()));
                rowGetArticleRow.ItemArray = new object[] {
                        b_id,
                        c_id,
                        c_step,
                        c_depth,
                        regdate,
                        subject,
                        writer,
                        email,
                        readcount,
                        downcount,
                        filename,
                        filesize,
                        password,
                        content};
                this.Rows.Add(rowGetArticleRow);
                return rowGetArticleRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                GetArticleDataTable cln = ((GetArticleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            internal void InitVars() {
                this.columnb_id = this.Columns["b_id"];
                this.columnc_id = this.Columns["c_id"];
                this.columnc_step = this.Columns["c_step"];
                this.columnc_depth = this.Columns["c_depth"];
                this.columnregdate = this.Columns["regdate"];
                this.columnsubject = this.Columns["subject"];
                this.columnwriter = this.Columns["writer"];
                this.columnemail = this.Columns["email"];
                this.columnreadcount = this.Columns["readcount"];
                this.columndowncount = this.Columns["downcount"];
                this.columnfilename = this.Columns["filename"];
                this.columnfilesize = this.Columns["filesize"];
                this.columnpassword = this.Columns["password"];
                this.columncontent = this.Columns["content"];
            }
            
            private void InitClass() {
                this.columnb_id = new DataColumn("b_id", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnb_id);
                this.columnc_id = new DataColumn("c_id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_id);
                this.columnc_step = new DataColumn("c_step", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_step);
                this.columnc_depth = new DataColumn("c_depth", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_depth);
                this.columnregdate = new DataColumn("regdate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnregdate);
                this.columnsubject = new DataColumn("subject", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsubject);
                this.columnwriter = new DataColumn("writer", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnwriter);
                this.columnemail = new DataColumn("email", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnemail);
                this.columnreadcount = new DataColumn("readcount", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnreadcount);
                this.columndowncount = new DataColumn("downcount", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndowncount);
                this.columnfilename = new DataColumn("filename", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfilename);
                this.columnfilesize = new DataColumn("filesize", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfilesize);
                this.columnpassword = new DataColumn("password", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpassword);
                this.columncontent = new DataColumn("content", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncontent);
                this.columnb_id.AllowDBNull = false;
                this.columnc_id.AllowDBNull = false;
                this.columnc_step.AllowDBNull = false;
                this.columnc_depth.AllowDBNull = false;
                this.columnregdate.AllowDBNull = false;
                this.columnwriter.AllowDBNull = false;
                this.columnreadcount.AllowDBNull = false;
                this.columndowncount.AllowDBNull = false;
                this.columnpassword.AllowDBNull = false;
            }
            
            public GetArticleRow NewGetArticleRow() {
                return ((GetArticleRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new GetArticleRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(GetArticleRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetArticleRowChanged != null)) {
                    this.GetArticleRowChanged(this, new GetArticleRowChangeEvent(((GetArticleRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetArticleRowChanging != null)) {
                    this.GetArticleRowChanging(this, new GetArticleRowChangeEvent(((GetArticleRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetArticleRowDeleted != null)) {
                    this.GetArticleRowDeleted(this, new GetArticleRowChangeEvent(((GetArticleRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetArticleRowDeleting != null)) {
                    this.GetArticleRowDeleting(this, new GetArticleRowChangeEvent(((GetArticleRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveGetArticleRow(GetArticleRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GetArticleRow : DataRow {
            
            private GetArticleDataTable tableGetArticle;
            
            internal GetArticleRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetArticle = ((GetArticleDataTable)(this.Table));
            }
            
            public string b_id {
                get {
                    return ((string)(this[this.tableGetArticle.b_idColumn]));
                }
                set {
                    this[this.tableGetArticle.b_idColumn] = value;
                }
            }
            
            public int c_id {
                get {
                    return ((int)(this[this.tableGetArticle.c_idColumn]));
                }
                set {
                    this[this.tableGetArticle.c_idColumn] = value;
                }
            }
            
            public int c_step {
                get {
                    return ((int)(this[this.tableGetArticle.c_stepColumn]));
                }
                set {
                    this[this.tableGetArticle.c_stepColumn] = value;
                }
            }
            
            public int c_depth {
                get {
                    return ((int)(this[this.tableGetArticle.c_depthColumn]));
                }
                set {
                    this[this.tableGetArticle.c_depthColumn] = value;
                }
            }
            
            public System.DateTime regdate {
                get {
                    return ((System.DateTime)(this[this.tableGetArticle.regdateColumn]));
                }
                set {
                    this[this.tableGetArticle.regdateColumn] = value;
                }
            }
            
            public string subject {
                get {
                    try {
                        return ((string)(this[this.tableGetArticle.subjectColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetArticle.subjectColumn] = value;
                }
            }
            
            public string writer {
                get {
                    return ((string)(this[this.tableGetArticle.writerColumn]));
                }
                set {
                    this[this.tableGetArticle.writerColumn] = value;
                }
            }
            
            public string email {
                get {
                    try {
                        return ((string)(this[this.tableGetArticle.emailColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetArticle.emailColumn] = value;
                }
            }
            
            public int readcount {
                get {
                    return ((int)(this[this.tableGetArticle.readcountColumn]));
                }
                set {
                    this[this.tableGetArticle.readcountColumn] = value;
                }
            }
            
            public int downcount {
                get {
                    return ((int)(this[this.tableGetArticle.downcountColumn]));
                }
                set {
                    this[this.tableGetArticle.downcountColumn] = value;
                }
            }
            
            public string filename {
                get {
                    try {
                        return ((string)(this[this.tableGetArticle.filenameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetArticle.filenameColumn] = value;
                }
            }
            
            public string filesize {
                get {
                    try {
                        return ((string)(this[this.tableGetArticle.filesizeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetArticle.filesizeColumn] = value;
                }
            }
            
            public string password {
                get {
                    return ((string)(this[this.tableGetArticle.passwordColumn]));
                }
                set {
                    this[this.tableGetArticle.passwordColumn] = value;
                }
            }
            
            public string content {
                get {
                    try {
                        return ((string)(this[this.tableGetArticle.contentColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetArticle.contentColumn] = value;
                }
            }
            
            public bool IssubjectNull() {
                return this.IsNull(this.tableGetArticle.subjectColumn);
            }
            
            public void SetsubjectNull() {
                this[this.tableGetArticle.subjectColumn] = System.Convert.DBNull;
            }
            
            public bool IsemailNull() {
                return this.IsNull(this.tableGetArticle.emailColumn);
            }
            
            public void SetemailNull() {
                this[this.tableGetArticle.emailColumn] = System.Convert.DBNull;
            }
            
            public bool IsfilenameNull() {
                return this.IsNull(this.tableGetArticle.filenameColumn);
            }
            
            public void SetfilenameNull() {
                this[this.tableGetArticle.filenameColumn] = System.Convert.DBNull;
            }
            
            public bool IsfilesizeNull() {
                return this.IsNull(this.tableGetArticle.filesizeColumn);
            }
            
            public void SetfilesizeNull() {
                this[this.tableGetArticle.filesizeColumn] = System.Convert.DBNull;
            }
            
            public bool IscontentNull() {
                return this.IsNull(this.tableGetArticle.contentColumn);
            }
            
            public void SetcontentNull() {
                this[this.tableGetArticle.contentColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GetArticleRowChangeEvent : EventArgs {
            
            private GetArticleRow eventRow;
            
            private DataRowAction eventAction;
            
            public GetArticleRowChangeEvent(GetArticleRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public GetArticleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
