//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace list2_cs {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsProduct : DataSet {
        
        private productDataTable tableproduct;
        
        public dsProduct() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsProduct(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["product"] != null)) {
                    this.Tables.Add(new productDataTable(ds.Tables["product"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public productDataTable product {
            get {
                return this.tableproduct;
            }
        }
        
        public override DataSet Clone() {
            dsProduct cln = ((dsProduct)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["product"] != null)) {
                this.Tables.Add(new productDataTable(ds.Tables["product"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableproduct = ((productDataTable)(this.Tables["product"]));
            if ((this.tableproduct != null)) {
                this.tableproduct.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsProduct";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsProduct.xsd";
            this.Locale = new System.Globalization.CultureInfo("ko-KR");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableproduct = new productDataTable();
            this.Tables.Add(this.tableproduct);
        }
        
        private bool ShouldSerializeproduct() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void productRowChangeEventHandler(object sender, productRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class productDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnId;
            
            private DataColumn columnproduct_name;
            
            private DataColumn columnvender;
            
            private DataColumn columndescription;
            
            private DataColumn columnspec;
            
            private DataColumn columnprice;
            
            private DataColumn columnimage;
            
            internal productDataTable() : 
                    base("product") {
                this.InitClass();
            }
            
            internal productDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            internal DataColumn product_nameColumn {
                get {
                    return this.columnproduct_name;
                }
            }
            
            internal DataColumn venderColumn {
                get {
                    return this.columnvender;
                }
            }
            
            internal DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            internal DataColumn specColumn {
                get {
                    return this.columnspec;
                }
            }
            
            internal DataColumn priceColumn {
                get {
                    return this.columnprice;
                }
            }
            
            internal DataColumn imageColumn {
                get {
                    return this.columnimage;
                }
            }
            
            public productRow this[int index] {
                get {
                    return ((productRow)(this.Rows[index]));
                }
            }
            
            public event productRowChangeEventHandler productRowChanged;
            
            public event productRowChangeEventHandler productRowChanging;
            
            public event productRowChangeEventHandler productRowDeleted;
            
            public event productRowChangeEventHandler productRowDeleting;
            
            public void AddproductRow(productRow row) {
                this.Rows.Add(row);
            }
            
            public productRow AddproductRow(int Id, string product_name, string vender, string description, string spec, System.Decimal price, string image) {
                productRow rowproductRow = ((productRow)(this.NewRow()));
                rowproductRow.ItemArray = new object[] {
                        Id,
                        product_name,
                        vender,
                        description,
                        spec,
                        price,
                        image};
                this.Rows.Add(rowproductRow);
                return rowproductRow;
            }
            
            public productRow FindById(int Id) {
                return ((productRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                productDataTable cln = ((productDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new productDataTable();
            }
            
            internal void InitVars() {
                this.columnId = this.Columns["Id"];
                this.columnproduct_name = this.Columns["product_name"];
                this.columnvender = this.Columns["vender"];
                this.columndescription = this.Columns["description"];
                this.columnspec = this.Columns["spec"];
                this.columnprice = this.Columns["price"];
                this.columnimage = this.Columns["image"];
            }
            
            private void InitClass() {
                this.columnId = new DataColumn("Id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnId);
                this.columnproduct_name = new DataColumn("product_name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnproduct_name);
                this.columnvender = new DataColumn("vender", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnvender);
                this.columndescription = new DataColumn("description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndescription);
                this.columnspec = new DataColumn("spec", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnspec);
                this.columnprice = new DataColumn("price", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnprice);
                this.columnimage = new DataColumn("image", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnimage);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnId}, true));
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnproduct_name.AllowDBNull = false;
                this.columnvender.AllowDBNull = false;
                this.columnprice.AllowDBNull = false;
            }
            
            public productRow NewproductRow() {
                return ((productRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new productRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(productRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.productRowChanged != null)) {
                    this.productRowChanged(this, new productRowChangeEvent(((productRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.productRowChanging != null)) {
                    this.productRowChanging(this, new productRowChangeEvent(((productRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.productRowDeleted != null)) {
                    this.productRowDeleted(this, new productRowChangeEvent(((productRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.productRowDeleting != null)) {
                    this.productRowDeleting(this, new productRowChangeEvent(((productRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveproductRow(productRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class productRow : DataRow {
            
            private productDataTable tableproduct;
            
            internal productRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableproduct = ((productDataTable)(this.Table));
            }
            
            public int Id {
                get {
                    return ((int)(this[this.tableproduct.IdColumn]));
                }
                set {
                    this[this.tableproduct.IdColumn] = value;
                }
            }
            
            public string product_name {
                get {
                    return ((string)(this[this.tableproduct.product_nameColumn]));
                }
                set {
                    this[this.tableproduct.product_nameColumn] = value;
                }
            }
            
            public string vender {
                get {
                    return ((string)(this[this.tableproduct.venderColumn]));
                }
                set {
                    this[this.tableproduct.venderColumn] = value;
                }
            }
            
            public string description {
                get {
                    try {
                        return ((string)(this[this.tableproduct.descriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableproduct.descriptionColumn] = value;
                }
            }
            
            public string spec {
                get {
                    try {
                        return ((string)(this[this.tableproduct.specColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableproduct.specColumn] = value;
                }
            }
            
            public System.Decimal price {
                get {
                    return ((System.Decimal)(this[this.tableproduct.priceColumn]));
                }
                set {
                    this[this.tableproduct.priceColumn] = value;
                }
            }
            
            public string image {
                get {
                    try {
                        return ((string)(this[this.tableproduct.imageColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e);
                    }
                }
                set {
                    this[this.tableproduct.imageColumn] = value;
                }
            }
            
            public bool IsdescriptionNull() {
                return this.IsNull(this.tableproduct.descriptionColumn);
            }
            
            public void SetdescriptionNull() {
                this[this.tableproduct.descriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsspecNull() {
                return this.IsNull(this.tableproduct.specColumn);
            }
            
            public void SetspecNull() {
                this[this.tableproduct.specColumn] = System.Convert.DBNull;
            }
            
            public bool IsimageNull() {
                return this.IsNull(this.tableproduct.imageColumn);
            }
            
            public void SetimageNull() {
                this[this.tableproduct.imageColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class productRowChangeEvent : EventArgs {
            
            private productRow eventRow;
            
            private DataRowAction eventAction;
            
            public productRowChangeEvent(productRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public productRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
