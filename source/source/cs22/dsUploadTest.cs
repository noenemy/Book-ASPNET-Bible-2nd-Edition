//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3328.4
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace tiptech_cs {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsUploadTest : DataSet {
        
        private upload_testDataTable tableupload_test;
        
        public dsUploadTest() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsUploadTest(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["upload_test"] != null)) {
                    this.Tables.Add(new upload_testDataTable(ds.Tables["upload_test"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public upload_testDataTable upload_test {
            get {
                return this.tableupload_test;
            }
        }
        
        public override DataSet Clone() {
            dsUploadTest cln = ((dsUploadTest)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["upload_test"] != null)) {
                this.Tables.Add(new upload_testDataTable(ds.Tables["upload_test"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableupload_test = ((upload_testDataTable)(this.Tables["upload_test"]));
            if ((this.tableupload_test != null)) {
                this.tableupload_test.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsUploadTest";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsUploadTest.xsd";
            this.Locale = new System.Globalization.CultureInfo("ko-KR");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableupload_test = new upload_testDataTable();
            this.Tables.Add(this.tableupload_test);
        }
        
        private bool ShouldSerializeupload_test() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void upload_testRowChangeEventHandler(object sender, upload_testRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class upload_testDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnId;
            
            private DataColumn columnfilename;
            
            private DataColumn columnfile_size;
            
            private DataColumn columncontent_type;
            
            private DataColumn columncontent;
            
            internal upload_testDataTable() : 
                    base("upload_test") {
                this.InitClass();
            }
            
            internal upload_testDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            internal DataColumn filenameColumn {
                get {
                    return this.columnfilename;
                }
            }
            
            internal DataColumn file_sizeColumn {
                get {
                    return this.columnfile_size;
                }
            }
            
            internal DataColumn content_typeColumn {
                get {
                    return this.columncontent_type;
                }
            }
            
            internal DataColumn contentColumn {
                get {
                    return this.columncontent;
                }
            }
            
            public upload_testRow this[int index] {
                get {
                    return ((upload_testRow)(this.Rows[index]));
                }
            }
            
            public event upload_testRowChangeEventHandler upload_testRowChanged;
            
            public event upload_testRowChangeEventHandler upload_testRowChanging;
            
            public event upload_testRowChangeEventHandler upload_testRowDeleted;
            
            public event upload_testRowChangeEventHandler upload_testRowDeleting;
            
            public void Addupload_testRow(upload_testRow row) {
                this.Rows.Add(row);
            }
            
            public upload_testRow Addupload_testRow(string filename, int file_size, string content_type, System.Byte[] content) {
                upload_testRow rowupload_testRow = ((upload_testRow)(this.NewRow()));
                rowupload_testRow.ItemArray = new object[] {
                        null,
                        filename,
                        file_size,
                        content_type,
                        content};
                this.Rows.Add(rowupload_testRow);
                return rowupload_testRow;
            }
            
            public upload_testRow FindById(int Id) {
                return ((upload_testRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                upload_testDataTable cln = ((upload_testDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            internal void InitVars() {
                this.columnId = this.Columns["Id"];
                this.columnfilename = this.Columns["filename"];
                this.columnfile_size = this.Columns["file_size"];
                this.columncontent_type = this.Columns["content_type"];
                this.columncontent = this.Columns["content"];
            }
            
            private void InitClass() {
                this.columnId = new DataColumn("Id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnId);
                this.columnfilename = new DataColumn("filename", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfilename);
                this.columnfile_size = new DataColumn("file_size", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfile_size);
                this.columncontent_type = new DataColumn("content_type", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncontent_type);
                this.columncontent = new DataColumn("content", typeof(System.Byte[]), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncontent);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnId}, true));
                this.columnId.AutoIncrement = true;
                this.columnId.AllowDBNull = false;
                this.columnId.ReadOnly = true;
                this.columnId.Unique = true;
                this.columnfilename.AllowDBNull = false;
                this.columnfile_size.AllowDBNull = false;
                this.columncontent_type.AllowDBNull = false;
                this.columncontent.AllowDBNull = false;
            }
            
            public upload_testRow Newupload_testRow() {
                return ((upload_testRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new upload_testRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(upload_testRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.upload_testRowChanged != null)) {
                    this.upload_testRowChanged(this, new upload_testRowChangeEvent(((upload_testRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.upload_testRowChanging != null)) {
                    this.upload_testRowChanging(this, new upload_testRowChangeEvent(((upload_testRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.upload_testRowDeleted != null)) {
                    this.upload_testRowDeleted(this, new upload_testRowChangeEvent(((upload_testRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.upload_testRowDeleting != null)) {
                    this.upload_testRowDeleting(this, new upload_testRowChangeEvent(((upload_testRow)(e.Row)), e.Action));
                }
            }
            
            public void Removeupload_testRow(upload_testRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class upload_testRow : DataRow {
            
            private upload_testDataTable tableupload_test;
            
            internal upload_testRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableupload_test = ((upload_testDataTable)(this.Table));
            }
            
            public int Id {
                get {
                    return ((int)(this[this.tableupload_test.IdColumn]));
                }
                set {
                    this[this.tableupload_test.IdColumn] = value;
                }
            }
            
            public string filename {
                get {
                    return ((string)(this[this.tableupload_test.filenameColumn]));
                }
                set {
                    this[this.tableupload_test.filenameColumn] = value;
                }
            }
            
            public int file_size {
                get {
                    return ((int)(this[this.tableupload_test.file_sizeColumn]));
                }
                set {
                    this[this.tableupload_test.file_sizeColumn] = value;
                }
            }
            
            public string content_type {
                get {
                    return ((string)(this[this.tableupload_test.content_typeColumn]));
                }
                set {
                    this[this.tableupload_test.content_typeColumn] = value;
                }
            }
            
            public System.Byte[] content {
                get {
                    return ((System.Byte[])(this[this.tableupload_test.contentColumn]));
                }
                set {
                    this[this.tableupload_test.contentColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class upload_testRowChangeEvent : EventArgs {
            
            private upload_testRow eventRow;
            
            private DataRowAction eventAction;
            
            public upload_testRowChangeEvent(upload_testRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public upload_testRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
