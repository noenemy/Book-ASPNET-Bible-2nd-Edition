'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.2914.16
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code")>  _
Public Class dsProduct
    Inherits System.Data.DataSet
    
    Private tableproduct As productDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
    End Sub
    
    Private Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Me.InitClass
        Me.GetSerializationData(info, context)
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property product As productDataTable
        Get
            Return Me.tableproduct
        End Get
    End Property
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.ReadXml(reader, XmlReadMode.IgnoreSchema)
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Private Sub InitClass()
        Me.DataSetName = "dsProduct"
        Me.Namespace = "http://www.tempuri.org/dsProduct.xsd"
        Me.tableproduct = New productDataTable
        Me.Tables.Add(Me.tableproduct)
    End Sub
    
    Private Function ShouldSerializeproduct() As Boolean
        Return false
    End Function
    
    Public Delegate Sub productRowChangeEventHandler(ByVal sender As Object, ByVal e As productRowChangeEvent)
    
    Public Class productDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnproduct_name As DataColumn
        
        Private columnvender As DataColumn
        
        Private columndescription As DataColumn
        
        Private columnspec As DataColumn
        
        Private columnprice As DataColumn
        
        Private columnimage As DataColumn
        
        Friend Sub New()
            MyBase.New("product")
            Me.InitClass
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property product_nameColumn As DataColumn
            Get
                Return Me.columnproduct_name
            End Get
        End Property
        
        Friend ReadOnly Property venderColumn As DataColumn
            Get
                Return Me.columnvender
            End Get
        End Property
        
        Friend ReadOnly Property descriptionColumn As DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        Friend ReadOnly Property specColumn As DataColumn
            Get
                Return Me.columnspec
            End Get
        End Property
        
        Friend ReadOnly Property priceColumn As DataColumn
            Get
                Return Me.columnprice
            End Get
        End Property
        
        Friend ReadOnly Property imageColumn As DataColumn
            Get
                Return Me.columnimage
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As productRow
            Get
                Return CType(Me.Rows(index),productRow)
            End Get
        End Property
        
        Public Event productRowChanged As productRowChangeEventHandler
        
        Public Event productRowChanging As productRowChangeEventHandler
        
        Public Event productRowDeleted As productRowChangeEventHandler
        
        Public Event productRowDeleting As productRowChangeEventHandler
        
        Public Overloads Sub AddproductRow(ByVal row As productRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddproductRow(ByVal Id As Integer, ByVal product_name As String, ByVal vender As String, ByVal description As String, ByVal spec As String, ByVal price As Decimal, ByVal image As String) As productRow
            Dim rowproductRow As productRow = CType(Me.NewRow,productRow)
            rowproductRow.ItemArray = New Object() {Id, product_name, vender, description, spec, price, image}
            Me.Rows.Add(rowproductRow)
            Return rowproductRow
        End Function
        
        Public Function FindById(ByVal Id As Integer) As productRow
            Return CType(Me.Rows.Find(New Object() {Id}),productRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int32), "", System.Data.MappingType.Element)
            Me.columnId.AllowDBNull = false
            Me.columnId.Unique = true
            Me.Columns.Add(Me.columnId)
            Me.columnproduct_name = New DataColumn("product_name", GetType(System.String), "", System.Data.MappingType.Element)
            Me.columnproduct_name.AllowDBNull = false
            Me.Columns.Add(Me.columnproduct_name)
            Me.columnvender = New DataColumn("vender", GetType(System.String), "", System.Data.MappingType.Element)
            Me.columnvender.AllowDBNull = false
            Me.Columns.Add(Me.columnvender)
            Me.columndescription = New DataColumn("description", GetType(System.String), "", System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndescription)
            Me.columnspec = New DataColumn("spec", GetType(System.String), "", System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnspec)
            Me.columnprice = New DataColumn("price", GetType(System.Decimal), "", System.Data.MappingType.Element)
            Me.columnprice.AllowDBNull = false
            Me.Columns.Add(Me.columnprice)
            Me.columnimage = New DataColumn("image", GetType(System.String), "", System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnimage)
            Me.PrimaryKey = New DataColumn() {Me.columnId}
        End Sub
        
        Public Function NewproductRow() As productRow
            Return CType(Me.NewRow,productRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            'We need to ensure that all Rows in the tabled are typed rows.
            'Table calls newRow whenever it needs to create a row.
            'So the following conditions are covered by Row newRow(Record record)
            '* Cursor calls table.addRecord(record) 
            '* table.addRow(object[] values) calls newRow(record)    
            Return New productRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(productRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.productRowChangedEvent) Is Nothing) Then
                RaiseEvent productRowChanged(Me, New productRowChangeEvent(CType(e.Row,productRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.productRowChangingEvent) Is Nothing) Then
                RaiseEvent productRowChanging(Me, New productRowChangeEvent(CType(e.Row,productRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.productRowDeletedEvent) Is Nothing) Then
                RaiseEvent productRowDeleted(Me, New productRowChangeEvent(CType(e.Row,productRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.productRowDeletingEvent) Is Nothing) Then
                RaiseEvent productRowDeleting(Me, New productRowChangeEvent(CType(e.Row,productRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveproductRow(ByVal row As productRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    Public Class productRow
        Inherits DataRow
        
        Private tableproduct As productDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableproduct = CType(Me.Table,productDataTable)
        End Sub
        
        Public Property Id As Integer
            Get
                Return CType(Me(Me.tableproduct.IdColumn),Integer)
            End Get
            Set
                Me(Me.tableproduct.IdColumn) = value
            End Set
        End Property
        
        Public Property product_name As String
            Get
                Return CType(Me(Me.tableproduct.product_nameColumn),String)
            End Get
            Set
                Me(Me.tableproduct.product_nameColumn) = value
            End Set
        End Property
        
        Public Property vender As String
            Get
                Return CType(Me(Me.tableproduct.venderColumn),String)
            End Get
            Set
                Me(Me.tableproduct.venderColumn) = value
            End Set
        End Property
        
        Public Property description As String
            Get
                Try 
                    Return CType(Me(Me.tableproduct.descriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e)
                End Try
            End Get
            Set
                Me(Me.tableproduct.descriptionColumn) = value
            End Set
        End Property
        
        Public Property spec As String
            Get
                Try 
                    Return CType(Me(Me.tableproduct.specColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e)
                End Try
            End Get
            Set
                Me(Me.tableproduct.specColumn) = value
            End Set
        End Property
        
        Public Property price As Decimal
            Get
                Return CType(Me(Me.tableproduct.priceColumn),Decimal)
            End Get
            Set
                Me(Me.tableproduct.priceColumn) = value
            End Set
        End Property
        
        Public Property image As String
            Get
                Try 
                    Return CType(Me(Me.tableproduct.imageColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("이 값은 DBNull이므로 가져올 수 없습니다.", e)
                End Try
            End Get
            Set
                Me(Me.tableproduct.imageColumn) = value
            End Set
        End Property
        
        Public Function IsdescriptionNull() As Boolean
            Return Me.IsNull(Me.tableproduct.descriptionColumn)
        End Function
        
        Public Sub SetdescriptionNull()
            Me(Me.tableproduct.descriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsspecNull() As Boolean
            Return Me.IsNull(Me.tableproduct.specColumn)
        End Function
        
        Public Sub SetspecNull()
            Me(Me.tableproduct.specColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsimageNull() As Boolean
            Return Me.IsNull(Me.tableproduct.imageColumn)
        End Function
        
        Public Sub SetimageNull()
            Me(Me.tableproduct.imageColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    Public Class productRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As productRow
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal row As productRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As productRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
